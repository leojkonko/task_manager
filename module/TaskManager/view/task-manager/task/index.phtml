<?php
$title = 'Task Manager';
$this->headTitle($title);
?>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mb-0"><?= $this->escapeHtml($title) ?></h1>
                <?php
                // Verificar se hoje é dia útil para criação de tarefas
                $today = new DateTime();
                $dayOfWeek = (int)$today->format('N'); // 1 = segunda, 7 = domingo
                $isWeekend = $dayOfWeek >= 6; // 6 = sábado, 7 = domingo
                ?>

                <?php if ($isWeekend): ?>
                    <button type="button" class="btn btn-primary disabled position-relative"
                        title="Tasks can only be created on weekdays (Monday to Friday)"
                        data-bs-toggle="tooltip" data-bs-placement="left">
                        <i class="fas fa-plus"></i> New Task
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning text-dark">
                            <i class="fas fa-calendar-times" style="font-size: 0.7em;"></i>
                        </span>
                    </button>
                <?php else: ?>
                    <a href="<?= $this->url('task-manager/create') ?>" class="btn btn-primary">
                        <i class="fas fa-plus"></i> New Task
                    </a>
                <?php endif; ?>
            </div>

            <?php if ($isWeekend): ?>
                <?php
                $dayNames = [6 => 'Saturday', 7 => 'Sunday'];
                // Calcular próximo dia útil
                $nextWeekday = clone $today;
                while ((int)$nextWeekday->format('N') >= 6) {
                    $nextWeekday->add(new DateInterval('P1D'));
                }
                $nextWeekdayNames = [
                    1 => 'Monday',
                    2 => 'Tuesday',
                    3 => 'Wednesday',
                    4 => 'Thursday',
                    5 => 'Friday'
                ];
                $nextWeekdayName = $nextWeekdayNames[(int)$nextWeekday->format('N')];
                ?>
                <div class="alert alert-info mb-4">
                    <h5><i class="fas fa-info-circle"></i> Task creation unavailable</h5>
                    <p class="mb-0">
                        <strong>Today is <?= $dayNames[$dayOfWeek] ?></strong> - New tasks can only be created during weekdays (Monday to Friday).
                        <br><strong>Next business day:</strong> <?= $nextWeekdayName ?>, <?= $nextWeekday->format('d/m/Y') ?>
                    </p>
                </div>
            <?php endif; ?>

            <!-- Filtros -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Filters</h5>
                </div>
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="search" class="form-label">Search</label>
                            <input type="text" class="form-control" id="search" name="search"
                                value="<?= $this->escapeHtmlAttr($filters['search'] ?? '') ?>"
                                placeholder="Task title...">
                        </div>
                        <div class="col-md-2">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status">
                                <option value="">All</option>
                                <?php foreach ($availableStatuses as $key => $label): ?>
                                    <option value="<?= $this->escapeHtmlAttr($key) ?>" <?= ($filters['status'] ?? '') === $key ? 'selected' : '' ?>>
                                        <?= $this->escapeHtml($label) ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="priority" class="form-label">Priority</label>
                            <select class="form-select" id="priority" name="priority">
                                <option value="">All</option>
                                <?php foreach ($availablePriorities as $key => $label): ?>
                                    <option value="<?= $this->escapeHtmlAttr($key) ?>" <?= ($filters['priority'] ?? '') === $key ? 'selected' : '' ?>>
                                        <?= $this->escapeHtml($label) ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="order_by" class="form-label">Order by</label>
                            <select class="form-select" id="order_by" name="order_by">
                                <option value="created_at" <?= ($filters['order_by'] ?? 'created_at') === 'created_at' ? 'selected' : '' ?>>Created</option>
                                <option value="due_date" <?= ($filters['order_by'] ?? '') === 'due_date' ? 'selected' : '' ?>>Due Date</option>
                                <option value="priority" <?= ($filters['order_by'] ?? '') === 'priority' ? 'selected' : '' ?>>Priority</option>
                                <option value="title" <?= ($filters['order_by'] ?? '') === 'title' ? 'selected' : '' ?>>Title</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <label for="order_direction" class="form-label">Direction</label>
                            <select class="form-select" id="order_direction" name="order_direction">
                                <option value="DESC" <?= ($filters['order_direction'] ?? 'DESC') === 'DESC' ? 'selected' : '' ?>>Desc</option>
                                <option value="ASC" <?= ($filters['order_direction'] ?? '') === 'ASC' ? 'selected' : '' ?>>Asc</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" class="btn btn-outline-primary me-2">Filter</button>
                            <a href="<?= $this->url('task-manager') ?>" class="btn btn-outline-secondary">Clear</a>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Lista de Tarefas -->
            <?php if (empty($tasks)): ?>
                <div class="alert alert-info text-center">
                    <h4>No tasks found</h4>
                    <p>Start by creating your first task!</p>
                    <a href="<?= $this->url('task-manager/create') ?>" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Create First Task
                    </a>
                </div>
            <?php else: ?>
                <div class="row">
                    <?php foreach ($tasks as $task): ?>
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="card h-100 <?= $task['is_overdue'] ? 'border-danger' : '' ?>">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <div>
                                        <span class="badge <?= $this->getStatusBadgeClass($task['status']) ?>">
                                            <?= $this->escapeHtml($availableStatuses[$task['status']]) ?>
                                        </span>
                                        <span class="badge <?= $this->getPriorityBadgeClass($task['priority']) ?>">
                                            <?= $this->escapeHtml($availablePriorities[$task['priority']]) ?>
                                        </span>
                                    </div>
                                    <?php if ($task['is_overdue']): ?>
                                        <small class="text-danger"><i class="fas fa-exclamation-triangle"></i> Overdue</small>
                                    <?php endif; ?>
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title"><?= $this->escapeHtml($task['title']) ?></h5>
                                    <?php if ($task['description']): ?>
                                        <p class="card-text"><?= $this->escapeHtml(substr($task['description'], 0, 100)) ?><?= strlen($task['description']) > 100 ? '...' : '' ?></p>
                                    <?php endif; ?>

                                    <?php if ($task['due_date']): ?>
                                        <p class="card-text">
                                            <small class="text-muted">
                                                <i class="fas fa-calendar"></i>
                                                Due: <?= date('d/m/Y H:i', strtotime($task['due_date'])) ?>
                                            </small>
                                        </p>
                                    <?php endif; ?>
                                </div>
                                <div class="card-footer">
                                    <!-- Avisos sobre restrições da tarefa -->
                                    <?php
                                    $hasRestrictions = false;
                                    $restrictions = [];

                                    if ($task['status'] !== 'pending') {
                                        $hasRestrictions = true;
                                        $restrictions[] = 'Task cannot be edited or deleted (status: ' . $availableStatuses[$task['status']] . ')';
                                    }

                                    if ($task['status'] === 'pending') {
                                        $createdAt = new DateTime($task['created_at']);
                                        $now = new DateTime();
                                        $daysSinceCreation = $now->diff($createdAt)->days;
                                        if ($daysSinceCreation < 5) {
                                            $hasRestrictions = true;
                                            $remainingDays = 5 - $daysSinceCreation;
                                            $restrictions[] = "Deletion available in {$remainingDays} day(s)";
                                        }
                                    }
                                    ?>

                                    <?php if ($hasRestrictions): ?>
                                        <div class="alert alert-warning alert-sm py-2 mb-2" style="font-size: 0.85em;">
                                            <i class="fas fa-info-circle"></i>
                                            <strong>Restrictions:</strong><br>
                                            <?php foreach ($restrictions as $restriction): ?>
                                                • <?= $this->escapeHtml($restriction) ?><br>
                                            <?php endforeach; ?>
                                        </div>
                                    <?php endif; ?>

                                    <div class="btn-group w-100" role="group">
                                        <a href="<?= $this->url('task-manager/view', ['id' => $task['id']]) ?>"
                                            class="btn btn-outline-primary btn-sm">View</a>

                                        <?php if ($task['status'] === 'pending'): ?>
                                            <a href="<?= $this->url('task-manager/edit', ['id' => $task['id']]) ?>"
                                                class="btn btn-outline-secondary btn-sm">Edit</a>
                                        <?php else: ?>
                                            <button type="button" class="btn btn-outline-secondary btn-sm disabled position-relative"
                                                title="Only pending tasks can be edited"
                                                data-bs-toggle="tooltip" data-bs-placement="top">
                                                Edit
                                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning text-dark">
                                                    <i class="fas fa-lock" style="font-size: 0.6em;"></i>
                                                </span>
                                            </button>
                                        <?php endif; ?>

                                        <?php if (!$task['is_completed']): ?>
                                            <button type="button" class="btn btn-outline-success btn-sm"
                                                onclick="completeTask(<?= $task['id'] ?>)">Complete</button>
                                        <?php endif; ?>
                                    </div>

                                    <div class="btn-group w-100 mt-1" role="group">
                                        <button type="button" class="btn btn-outline-info btn-sm"
                                            onclick="duplicateTask(<?= $task['id'] ?>)">Duplicate</button>

                                        <?php
                                        // Verificar se pode excluir: status pending + mais de 5 dias
                                        $canDelete = $task['status'] === 'pending';
                                        if ($canDelete) {
                                            $createdAt = new DateTime($task['created_at']);
                                            $now = new DateTime();
                                            $daysSinceCreation = $now->diff($createdAt)->days;
                                            $canDelete = $daysSinceCreation >= 5;
                                        }
                                        ?>

                                        <?php if ($canDelete): ?>
                                            <button type="button" class="btn btn-outline-danger btn-sm"
                                                onclick="deleteTask(<?= $task['id'] ?>)">Delete</button>
                                        <?php else: ?>
                                            <?php
                                            if ($task['status'] !== 'pending') {
                                                $tooltip = 'Only pending tasks can be deleted';
                                                $lockReason = 'STATUS';
                                            } else {
                                                $remainingDays = 5 - $daysSinceCreation;
                                                $tooltip = "Deletion will be available in {$remainingDays} day(s). Tasks can only be deleted 5 days after creation.";
                                                $lockReason = $remainingDays . 'd';
                                            }
                                            ?>
                                            <button type="button" class="btn btn-outline-danger btn-sm disabled position-relative"
                                                title="<?= $this->escapeHtmlAttr($tooltip) ?>"
                                                data-bs-toggle="tooltip" data-bs-placement="top">
                                                Delete
                                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger text-white">
                                                    <i class="fas fa-lock" style="font-size: 0.6em;"></i>
                                                </span>
                                            </button>
                                        <?php endif; ?>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>

                <!-- Paginação -->
                <?php if ($pagination['total_pages'] > 1): ?>
                    <nav aria-label="Task pagination">
                        <ul class="pagination justify-content-center">
                            <?php if ($pagination['page'] > 1): ?>
                                <li class="page-item">
                                    <a class="page-link" href="<?= $this->url('task-manager', [], ['query' => array_merge($_GET, ['page' => $pagination['page'] - 1])]) ?>">Previous</a>
                                </li>
                            <?php endif; ?>

                            <?php for ($i = 1; $i <= $pagination['total_pages']; $i++): ?>
                                <li class="page-item <?= $i === $pagination['page'] ? 'active' : '' ?>">
                                    <a class="page-link" href="<?= $this->url('task-manager', [], ['query' => array_merge($_GET, ['page' => $i])]) ?>"><?= $i ?></a>
                                </li>
                            <?php endfor; ?>

                            <?php if ($pagination['page'] < $pagination['total_pages']): ?>
                                <li class="page-item">
                                    <a class="page-link" href="<?= $this->url('task-manager', [], ['query' => array_merge($_GET, ['page' => $pagination['page'] + 1])]) ?>">Next</a>
                                </li>
                            <?php endif; ?>
                        </ul>
                    </nav>
                <?php endif; ?>
            <?php endif; ?>
        </div>
    </div>
</div>

<script>
    function completeTask(id) {
        const confirmMessage = '🏆 Mark this task as completed?';

        if (confirm(confirmMessage)) {
            // Mostrar loading toast
            if (typeof showInfoToast === 'function') {
                showInfoToast('⏳ Processing...', 'Please wait');
            }

            fetch(`/tasks/complete/${id}`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (typeof showSuccessToast === 'function') {
                            showSuccessToast('🏆 Congratulations! Task marked as completed.', 'Success!');
                        }
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        if (typeof showErrorToast === 'function') {
                            showErrorToast(data.message || '😓 Something went wrong.', 'Oops!');
                        } else {
                            alert('Error: ' + data.message);
                        }
                    }
                })
                .catch(error => {
                    if (typeof showErrorToast === 'function') {
                        showErrorToast('😓 Connection error. Please try again.', 'Network Error');
                    } else {
                        alert('Error completing task');
                    }
                });
        }
    }

    function duplicateTask(id) {
        const confirmMessage = '📋 Duplicate this task?';

        if (confirm(confirmMessage)) {
            // Mostrar loading toast
            if (typeof showInfoToast === 'function') {
                showInfoToast('⏳ Duplicating task...', 'Please wait');
            }

            fetch(`/tasks/duplicate/${id}`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (typeof showSuccessToast === 'function') {
                            showSuccessToast('📋 Task duplicated successfully! A new task was created.', 'Completed!');
                        }
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        if (typeof showErrorToast === 'function') {
                            showErrorToast(data.message || '😓 Something went wrong.', 'Ops!');
                        } else {
                            alert('Error: ' + data.message);
                        }
                    }
                })
                .catch(error => {
                    if (typeof showErrorToast === 'function') {
                        showErrorToast('😓 Connection error. Please try again.', 'Network Error');
                    } else {
                        alert('Error duplicating task');
                    }
                });
        }
    }

    function deleteTask(id) {
        if (confirm('Are you sure you want to delete this task? This action cannot be undone.')) {
            fetch(`/tasks/delete/${id}`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (typeof showSuccessToast === 'function') {
                            showSuccessToast('🗑️ Task deleted successfully!', 'Completed!');
                        }
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        // Aqui é onde aparecerá a mensagem amigável sobre os 5 dias
                        if (typeof showErrorToast === 'function') {
                            showErrorToast(data.message || '😓 Something went wrong.', 'Oops!');
                        } else {
                            alert('Error: ' + data.message);
                        }
                    }
                })
                .catch(error => {
                    if (typeof showErrorToast === 'function') {
                        showErrorToast('😓 Connection error. Please try again.', 'Network Error');
                    } else {
                        alert('Error deleting task');
                    }
                });
        }
    }
</script>

<!-- Script para inicializar tooltips do Bootstrap -->
<script>
    // Inicializar todos os tooltips na página
    document.addEventListener('DOMContentLoaded', function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl, {
                delay: {
                    "show": 500,
                    "hide": 100
                },
                placement: 'auto'
            });
        });
    });
</script>