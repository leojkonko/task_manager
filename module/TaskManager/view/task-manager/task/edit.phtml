<?php
$title = 'Editar Tarefa: ' . $task['title'];
$this->headTitle($title);
?>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Editar Tarefa</h3>
                </div>
                <div class="card-body">
                    <?php
                    $form->setAttribute('action', $this->url('task-manager/edit', ['id' => $task['id']]));
                    $form->setAttribute('data-enhance-feedback', 'true');
                    $form->prepare();
                    echo $this->form()->openTag($form);
                    ?>

                    <!-- Exibir erros de valida√ß√£o -->
                    <?php if ($form->getMessages()): ?>
                        <div class="alert alert-danger">
                            <h6>Por favor, corrija os seguintes erros:</h6>
                            <ul class="mb-0">
                                <?php foreach ($form->getMessages() as $field => $errors): ?>
                                    <?php foreach ($errors as $error): ?>
                                        <li><?= $this->escapeHtml($error) ?></li>
                                    <?php endforeach; ?>
                                <?php endforeach; ?>
                            </ul>
                        </div>
                    <?php endif; ?>

                    <!-- CSRF Token (hidden) -->
                    <?= $this->formElement($form->get('csrf')) ?>
                    <?= $this->formElement($form->get('id')) ?>

                    <div class="mb-3">
                        <?= $this->formLabel($form->get('title')) ?>
                        <?= $this->formElement($form->get('title')) ?>
                        <?= $this->formElementErrors($form->get('title')) ?>
                    </div>

                    <div class="mb-3">
                        <?= $this->formLabel($form->get('description')) ?>
                        <?= $this->formElement($form->get('description')) ?>
                        <?= $this->formElementErrors($form->get('description')) ?>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <?= $this->formLabel($form->get('status')) ?>
                                <?= $this->formElement($form->get('status')) ?>
                                <?= $this->formElementErrors($form->get('status')) ?>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <?= $this->formLabel($form->get('priority')) ?>
                                <?= $this->formElement($form->get('priority')) ?>
                                <?= $this->formElementErrors($form->get('priority')) ?>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <?= $this->formLabel($form->get('due_date')) ?>
                                <?= $this->formElement($form->get('due_date')) ?>
                                <?= $this->formElementErrors($form->get('due_date')) ?>
                                <div class="form-text">Deixe em branco se n√£o houver prazo espec√≠fico</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <?= $this->formLabel($form->get('category_id')) ?>
                                <?= $this->formElement($form->get('category_id')) ?>
                                <?= $this->formElementErrors($form->get('category_id')) ?>
                            </div>
                        </div>
                    </div>

                    <!-- Informa√ß√µes adicionais -->
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Data de Cria√ß√£o</label>
                                <input type="text" class="form-control" value="<?= date('d/m/Y H:i', strtotime($task['created_at'])) ?>" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">√öltima Atualiza√ß√£o</label>
                                <input type="text" class="form-control" value="<?= date('d/m/Y H:i', strtotime($task['updated_at'])) ?>" readonly>
                            </div>
                        </div>
                    </div>

                    <?php if ($task['completed_at']): ?>
                        <div class="mb-3">
                            <label class="form-label">Data de Conclus√£o</label>
                            <input type="text" class="form-control" value="<?= date('d/m/Y H:i', strtotime($task['completed_at'])) ?>" readonly>
                        </div>
                    <?php endif; ?>

                    <div class="d-flex justify-content-between">
                        <div>
                            <a href="<?= $this->url('task-manager') ?>" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Voltar
                            </a>
                            <a href="<?= $this->url('task-manager/view', ['id' => $task['id']]) ?>" class="btn btn-outline-info">
                                <i class="fas fa-eye"></i> Visualizar
                            </a>
                        </div>
                        <div>
                            <?= $this->formElement($form->get('submit')) ?>
                            <button type="button" class="btn btn-danger" onclick="deleteTask(<?= $task['id'] ?>)">
                                <i class="fas fa-trash"></i> Excluir
                            </button>
                        </div>
                    </div>

                    <?= $this->form()->closeTag() ?>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Valida√ß√£o client-side adicional
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('task-form');
        const titleInput = document.getElementById('title');

        form.addEventListener('submit', function(e) {
            let isValid = true;

            // Validar t√≠tulo
            if (titleInput.value.trim().length < 3) {
                isValid = false;
                titleInput.classList.add('is-invalid');
                showFieldError(titleInput, 'O t√≠tulo deve ter pelo menos 3 caracteres');
            } else {
                titleInput.classList.remove('is-invalid');
                hideFieldError(titleInput);
            }

            if (!isValid) {
                e.preventDefault();
            }
        });

        // Remover erro ao digitar
        titleInput.addEventListener('input', function() {
            if (this.value.trim().length >= 3) {
                this.classList.remove('is-invalid');
                hideFieldError(this);
            }
        });
    });

    function showFieldError(field, message) {
        hideFieldError(field);
        const errorDiv = document.createElement('div');
        errorDiv.className = 'invalid-feedback';
        errorDiv.textContent = message;
        field.parentNode.appendChild(errorDiv);
    }

    function hideFieldError(field) {
        const errorDiv = field.parentNode.querySelector('.invalid-feedback');
        if (errorDiv) {
            errorDiv.remove();
        }
    }

    function deleteTask(id) {
        // Usar mensagem de confirma√ß√£o personalizada
        const taskTitle = '<?= addslashes($task['title']) ?>';
        const confirmMessage = `üóëÔ∏è Tem certeza que deseja excluir "${taskTitle}"?\n\nEsta a√ß√£o n√£o pode ser desfeita.`;
        
        if (confirm(confirmMessage)) {
            // Mostrar loading toast
            if (typeof showInfoToast === 'function') {
                showInfoToast('‚è≥ Processando exclus√£o...', 'Aguarde');
            }
            
            fetch(`/tasks/delete/${id}`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Sucesso - usar toast verde
                        if (typeof showSuccessToast === 'function') {
                            showSuccessToast('üéâ Tarefa exclu√≠da com sucesso!', 'Conclu√≠do!');
                        } else {
                            alert('Tarefa exclu√≠da com sucesso!');
                        }
                        
                        // Redirecionar ap√≥s um pequeno delay para mostrar o toast
                        setTimeout(() => {
                            window.location.href = '/tasks';
                        }, 1500);
                    } else {
                        // Erro - usar toast vermelho com mensagem amig√°vel
                        if (typeof showErrorToast === 'function') {
                            showErrorToast(data.message || 'üòì Algo n√£o saiu como esperado. Tente novamente em alguns instantes.', 'Ops!');
                        } else {
                            alert('Erro: ' + data.message);
                        }
                    }
                })
                .catch(error => {
                    // Erro de rede - usar toast vermelho
                    if (typeof showErrorToast === 'function') {
                        showErrorToast('üòì Erro de conex√£o. Verifique sua internet e tente novamente.', 'Erro de Rede');
                    } else {
                        alert('Erro ao excluir tarefa');
                    }
                });
        }
    }
</script>